let Joi,User,RefreshToken,CustomErrorHandler,bcrypt,JwtService,REFRESH_SECRET;_a00‍.x([["default",()=>_a00‍.o]]);_a00‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_a00‍.w("../../models",[["User",["User"],function(v){User=v}],["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}]]);_a00‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_a00‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_a00‍.w("../../services/JwtServices",[["default",["JwtService"],function(v){JwtService=v}]]);_a00‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);






const loginController = {
    async login(req, res, next){
        const loginSchema = Joi.object({
            email: Joi.string().email().required(),
            password: Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required(),
        })

        const { error } = loginSchema.validate(req.body);

        if(error) {
            return next(error);
        }


        try {
            const user =await User.findOne({email: req.body.email})
            if(!user) {
                return next(CustomErrorHandler.wrongCredentials())
            }

            // compare password against database
            const match = await bcrypt.compare(req.body.password, user.password);

            if(!match){
                return next(CustomErrorHandler.wrongCredentials())
            }

            // generate token
            const access_token = JwtService.sign({ _id: user._id, role: user.role })
            const refresh_token = JwtService.sign({ _id: user._id, role: user.role }, '1y', REFRESH_SECRET)
            // database whitelist 
            await RefreshToken.create({token: refresh_token})

            res.json({access_token: access_token, refresh_token: refresh_token})

        } catch (error) {
            return next(error);
        }
    },

    async logout(req, res, next){
        // validation 
        const refreshSchema = Joi.object({
            refresh_token: Joi.string().required()
        })

        const {error} = refreshSchema.validate(req.body);

        if(error){
            return next(error);
        }


        try {
            await RefreshToken.deleteOne({token: req.body.refresh_token});
        } catch (error) {
            return next(new Error('Something went wrong in the database'));
        }

        res.json({status: 'success'})
    }
}
_a00‍.d(loginController);